//
// Created by Mohamed Yasser on 6/6/2025.
//

#include "Speed.h"
#include "stm32f4xx.h"

static uint32 capture1 = 0;
static uint32 capture2 = 0;
static uint8 captureState = 0;
static uint32 lastMeasuredPeriod = 0;

void SpeedMeasurement_Init(void) {
    // 1. Enable TIM3 and GPIOA clocks
    RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;

    // 2. Configure PA6 (TIM3_CH1) as alternate function AF2
    GPIOA->MODER &= ~(3 << (6 * 2));
    GPIOA->MODER |=  (2 << (6 * 2));   // Alternate function
    GPIOA->AFR[0] &= ~(0xF << (6 * 4));
    GPIOA->AFR[0] |=  (2 << (6 * 4));  // AF2 = TIM3

    // 3. Timer base configuration
    TIM3->CR1 = 0;
    TIM3->CCER = 0;

    TIM3->PSC = 249;        // 84 MHz / (83 + 1) = 1 MHz timer clock
    TIM3->ARR = 0xFFFF;

    // 4. Input capture mode on channel 1 (TI1)
    TIM3->CCMR1 &= ~(0x3 << 0);
    TIM3->CCMR1 |=  (0x1 << 0);   // CC1S = 01 (TI1)
    TIM3->CCMR1 &= ~(0xF << 4);   // No filter
    TIM3->CCMR1 &= ~(0x3 << 2);   // No prescaler

    TIM3->CCER &= ~(1 << 1);  // Rising edge
    TIM3->CCER |= (1 << 0);   // Enable capture

    TIM3->DIER = 0;           // No interrupts

    TIM3->CR1 |= 1;           // Enable counter
}

uint8 SpeedMeasurement_GetPeriod(uint32* period) {
    if (TIM3->SR & TIM_SR_CC1OF) {
        TIM3->SR &= ~TIM_SR_CC1OF;
        captureState = 0;
        return 0;
    }

    if (TIM3->SR & TIM_SR_CC1IF) {
        TIM3->SR &= ~TIM_SR_CC1IF;

        if (captureState == 0) {
            capture1 = TIM3->CCR1;
            captureState = 1;
            return 0;
        } else {
            capture2 = TIM3->CCR1;

            if (capture2 >= capture1) {
                lastMeasuredPeriod = capture2 - capture1;
            } else {
                lastMeasuredPeriod = (0xFFFF - capture1) + capture2 + 1;
            }

            *period = lastMeasuredPeriod;
            captureState = 0;
            return 1;
        }
    }

    return 0;
}

float SpeedMeasurement_GetFrequency(uint32 timerClockFreq) {
    if (lastMeasuredPeriod == 0) {
        return 0.0f;
    }
    return ((float)timerClockFreq / lastMeasuredPeriod);
}
